{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAkIA;;GAEG;AACH,MAAM,CAAN,IAAY,WAaX;AAbD,WAAY,WAAW;IACrB,uCAAwB,CAAA;IACxB,iDAAkC,CAAA;IAClC,wDAAyC,CAAA;IACzC,0DAA2C,CAAA;IAC3C,wDAAyC,CAAA;IACzC,kEAAmD,CAAA;IACnD,mDAAoC,CAAA;IACpC,6CAA8B,CAAA;IAC9B,+CAAgC,CAAA;IAChC,2CAA4B,CAAA;IAC5B,gCAAiB,CAAA;IACjB,uCAAwB,CAAA;AAC1B,CAAC,EAbW,WAAW,KAAX,WAAW,QAatB","sourcesContent":["export interface CapacitorHealthkitPlugin {\r\n  /**\r\n   * This functions will open the iOS Screen to let users choose their permissions. Keep in mind as developers, if the access has been denied by the user we will have no way of knowing - the query results will instead just be empty arrays.\r\n   * @param authOptions These define which access we need. Possible Options include ['calories', 'stairs', 'activity', 'steps', 'distance', 'duration', 'weight'].\r\n\r\n   */\r\n  requestAuthorization(authOptions: AuthorizationQueryOptions): Promise<void>;\r\n  /**\r\n   * This defines a query to the Healthkit for a single type of data.\r\n   * @param queryOptions defines the type of data and the timeframe which shall be queried, a limit can be set to reduce the number of results.\r\n   */\r\n  queryHKitSampleType<T>(queryOptions:SingleQueryOptions): Promise<QueryOutput<T>>;\r\n  /**\r\n   * This functions resolves if HealthKitData is available it uses the native HKHealthStore.isHealthDataAvailable() funtion of the HealthKit .\r\n   */\r\n  isAvailable(): Promise<void>;\r\n  /**\r\n   * This defines a query to the Healthkit for a single type of data. This function has not been tested.\r\n   * @param queryOptions defines the sample types which can be queried for\r\n   */\r\n  multipleQueryHKitSampleType(queryOptions:MultipleQueryOptions): Promise<any>;\r\n  /**\r\n   * Checks if there is writing permission for one specific sample type. This function has not been tested.\r\n   * @param queryOptions defines the sampletype for which you need to check for writing permission.\r\n   */\r\n  isEditionAuthorized(queryOptions: EditionQuery): Promise<void>;\r\n  /**\r\n   * Checks if there is writing permission for multiple sample types. This function has not been tested - and usually needs a parameter to be able to answer.\r\n   */\r\n  multipleIsEditionAuthorized(): Promise<void>;\r\n}\r\n\r\n/**\r\n * This interface is used for any results coming from HealthKit. It always has a count and the actual results.\r\n */\r\nexport interface QueryOutput<T = SleepData | ActivityData | OtherData> {\r\n  countReturn: number;\r\n  resultData: T[];\r\n}\r\n\r\nexport interface DeviceInformation {\r\n  name: string;\r\n  manufacturer: string;\r\n  model: string;\r\n  hardwareVersion: string;\r\n  softwareVersion: string;\r\n}\r\n\r\n/**\r\n * These data points are returned for every entry.\r\n */\r\nexport interface BaseData {\r\n  startDate: string;\r\n  endDate: string;\r\n  source: string;\r\n  uuid: string;\r\n  sourceBundleId: string;\r\n  device: DeviceInformation | null;\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * These data points are specific for sleep data.\r\n */\r\nexport interface SleepData extends BaseData  {\r\n  sleepState: string;\r\n  timeZone: string;\r\n}\r\n\r\n/**\r\n * These data points are specific for activities - not every activity automatically has a corresponding entry. \r\n */\r\nexport interface ActivityData extends BaseData {\r\n  totalFlightsClimbed: number;\r\n  totalSwimmingStrokeCount: number;\r\n  totalEnergyBurned: number;\r\n  totalDistance: number;\r\n  workoutActivityId: number;\r\n  workoutActivityName: string;\r\n}\r\n\r\n/**\r\n * These datapoints are used in the plugin for ACTIVE_ENERGY_BURNED and STEP_COUNT.\r\n */\r\nexport interface OtherData extends BaseData {\r\n  unitName: string;\r\n  value: number;\r\n}\r\n\r\n/**\r\n * These Basequeryoptions are always necessary for a query, they are extended by SingleQueryOptions and MultipleQueryOptions.\r\n */\r\nexport interface BaseQueryOptions {\r\n  startDate: string;\r\n  endDate: string;\r\n  limit: number;\r\n}\r\n\r\n/**\r\n * This extends the Basequeryoptions for a single sample type.\r\n */\r\nexport interface SingleQueryOptions extends BaseQueryOptions {\r\n  sampleName: string;\r\n}\r\n\r\n/**\r\n * This extends the Basequeryoptions for a multiple sample types.\r\n */\r\nexport interface MultipleQueryOptions extends BaseQueryOptions {\r\n  sampleNames: string[];\r\n}\r\n\r\n\r\n/**\r\n * Used for authorization of reading and writing access.\r\n */\r\nexport interface AuthorizationQueryOptions {\r\n  read: string[];\r\n  write: string[];\r\n  all: string[];\r\n}\r\n\r\n\r\n/**\r\n * This is used for checking writing permissions.\r\n */\r\nexport interface EditionQuery {\r\n  sampleName: string;\r\n}\r\n\r\n/**\r\n * These Sample names define the possible query options.\r\n */\r\nexport enum SampleNames {\r\n  STEP_COUNT = 'stepCount',\r\n  FLIGHTS_CLIMBED = 'flightsClimbed',\r\n  APPLE_EXERCISE_TIME = 'appleExerciseTime',\r\n  ACTIVE_ENERGY_BURNED = 'activeEnergyBurned',\r\n  BASAL_ENERGY_BURNED = 'basalEnergyBurned',\r\n  DISTANCE_WALKING_RUNNING = 'distanceWalkingRunning',\r\n  DISTANCE_CYCLING = 'distanceCycling',\r\n  BLOOD_GLUCOSE = 'bloodGlucose',\r\n  SLEEP_ANALYSIS = 'sleepAnalysis',\r\n  WORKOUT_TYPE = 'workoutType',\r\n  WEIGHT = 'weight',\r\n  HEART_RATE = 'heartRate',\r\n}\r\n"]}